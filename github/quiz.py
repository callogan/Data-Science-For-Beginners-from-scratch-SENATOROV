"""Ответы на вопросы по GitHub (комплексный quiz)."""

# GITHUB

# 1.1. Что такое GitHub?
#
# GitHub — это крупнейшая платформа для хранения Git-репозиториев, а также пространство для совместной работы большого количества разработчиков над различными проектами.

# 1.2. Как GitHub связан с Git?
#
# - Разработчики используют Git для работы с локальными копиями репозиториев и могут отправлять свои изменения в удалённые репозитории на GitHub.
# - Для того, чтобы с помощью Git можно было редактировать репозитории локально, GitHub предоставляет возможность клонировать и форкать такие репозитории (разработчики получают их копии для дальнейшей работы),
# - С помощью GitHub разработчики могут создавать pull-запросы, предлагая свои изменения для добавления в основной репозиторий.

# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
#
# Fork — это создание копии чужого репозитория в нашем аккаунте на GitHub. Чтобы начать работать с этим репозиторием локально, его нужно клонировать на свой компьютер.
# Клонирование (clone) — это процесс загрузки репозитория с GitHub на локальный компьютер для дальнейшей работы с ним.

# 1.4. Зачем нужны и как работают Pull requests?
#
# Pull Requests (PR) — это инструмент в Git и GitHub, позволяющий разработчикам предлагать изменения в кодовой базе, облегчая совместную работу над проектом. Они помогают поддерживать качество кода и согласованность вносимых изменений.
#
# Как работает Pull Request:
#
# а) Разработчик создает форк основного репозитория на GitHub и клонирует его на локальный компьютер.
# б) В локальном репозитории создается новая ветка для работы над изменениями.
# в) После внесения правок разработчик делает коммиты и пушит изменения в свой форк на GitHub.
# г) На странице форка разработчик создает Pull Request, указывая основную ветку (например, main или master) в качестве целевой и свою ветку с изменениями — как исходную.
# д) Участники проекта просматривают PR, оставляют комментарии, предлагают улучшения и обсуждают код.
# е) После успешного ревью и одобрения Pull Request объединяется (сливается) с основной веткой проекта.

# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
#
# Да, GitHub использует ваш почтовый адрес для связывания Git-коммитов с вашей учетной записью, чтобы корректно определить автора каждого коммита и отразить это на платформе.

# 1.6. Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию (Рисунок 83)
#
# Команда для генерации SSH-ключа — ssh-keygen. После выполнения данной команды ключ будет создан и сохранён в файле ~/.ssh/id_rsa.pub. Чтобы добавить его на GitHub, необходимо открыть настройки своей учётной записи, перейти в раздел SSH and GPG keys и нажать "Add SSH key". В поле Title следует указать имя для ключа, а в поле Key - вставить содержимое файла id_rsa.pub. Затем надо нажать "Add key" для сохранения.

# ВНЕСЕНИЕ СОБСТВЕННОГО ВКЛАДА В ПРОЕКТЫ

# 2. Создайте ишьюс и запомните его номер.
#
# Выполнено

# 2.1. Если вы хотите вносить свой вклад в уже существующие проекты, в которых у нас нет прав на внесения изменений путём отправки (push) изменений, вы можете создать своё собственное ответвление, что нужно сделать чтобы создать собственное ответвление (Рисунок 88)?
#
# Необходимо сделать форк репозитория.
#
# Сделайте ответвление https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV, и вставьте сюда ссылку на ваше ответвление.
#
# https://github.com/callogan/Data-Science-For-Beginners-from-scratch-SENATOROV

# 2.2 создайте ветку dev в ФОРКЕ Data-Science-For-Beginners, вставьте сюда ссылку на вашу ветку dev
#
# https://github.com/callogan/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev

# 2.3 В README файле вашего ФОРКА, добавьте ссылку на мой телеграм канал https://t.me/RuslanSenatorov, сохраните коммит, название коммита - в тайтле название ишьюса (#номер_ишьюс), в дескрипшене - Closes #NUMBER-ISSUES номер возьмите из пункта 2
#
# Выполнено

# 2.4 Отправьте пул реквест из ФОРКА в основу В ВАШУ ВЕТКУ, тайтл пул реквеста скопируйте из ISSUES-TITLE, в дескрипшине пул реквеста напишите Closes #NUMBER-ISSUES вставьте номер из пункта 2
#
# Выполнено

# 2.5 Прокомментируйте ваш пул реквест перед слиянием, перейдите во вкладку(Рисунок 92) и напишите "ок", потом нажимайте сабмит ревью затем не выходя из этой вкладки, в файле README , добавьте туда ссылку на https://t.me/SENATOROVAI, => инструкция
#
# Выполнено

# 2.6 Выполните Merge pull request (Рисунок 116), вставьте сюда ссылку на ваш пул реквест
#
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/203
#
# Примечание: сам Merge pull request выполнить не удалось, поскольку, вероятно, часть линтеров (black, convert_notebooks, isort) не обрабатывают такой кейс, как внесённые мной изменения в файл README.md.

# 2.7 Вставьте сюда ссылку на закрытые пул реквесты в репозитории, найти можно тут
#
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr+is%3Aclosed

# 2.8 Как посмотреть какие файлы были в репозитории на момент определенного коммита? вставьте сюда ссылку на любой коммит, где взять ссылку? подсказка:
#
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/commit/6d34ebf9c7e2a2678a3b66748696782fe1768d63

# 2.9 как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно? (Рисунок 117)
#
# Если Вы хотите предложить улучшения к существующему запросу слияния, сомневаетесь в его решении или не имеете прав на запись в целевую ветку, можно создать новый запрос слияния, ссылающийся на текущий.
#
# Для этого при создании нового pull request на GitHub в верхней части страницы отобразится меню для выбора исходной и целевой веток. Нажав кнопку "Edit" справа, Вы сможете выбрать не только другую исходную ветку, но и форк репозитория. Здесь можно указать вашу новую ветку для слияния с уже существующим Pull request или другим форком проекта.
#
# Такой подход позволяет предлагать улучшения или вносить правки кода, даже если у Вас нет прямого доступа к целевой ветке.

# РАБОЧИЙ ПРОЦЕСС С ИСПОЛЬЗОВАНИЕМ GITHUB

# 3. Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
#
# * Сделайте форк репозитория — создайте собственную копию проекта на GitHub.
# * Склонируйте форк на локальный компьютер с помощью команды git clone, чтобы работать с кодом офлайн.
# * Создайте новую ветку для ваших изменений и запушьте её на GitHub (git checkout -b имя-ветки и git push).
# * Внесите необходимые изменения в код или документацию проекта.
# * Сделайте коммит с понятным описанием внесённых изменений (git commit -m "Описание изменений").
# * Запушьте коммит в свою ветку на форкнутом репозитории (git push origin имя-ветки).
# * Создайте pull request (PR), указав, что было изменено и как это улучшает проект.
# * Участвуйте в обсуждении PR, отвечайте на комментарии и вносите дополнительные правки при необходимости.

# 3.1. По поводу некоторых практик
#
# 3.1.1. Какие практики принято соблюдать при создании Pull Request (PR) чтобы закрыть автоматический issues?
#
# - Используйте ключевые слова в описании PR, такие как closes, fixes или resolves, чтобы GitHub автоматически закрыл связанный issue после слияния (например, closes #123).
# - Добавьте чёткое и детальное описание внесённых изменений и укажите, как они решают связанный issue.
# - Включите ссылку на issue в описание PR для упрощения навигации между PR и задачей.
# - Убедитесь, что все тесты проходят успешно, чтобы ваши изменения не сломали работу проекта.
# - Участвуйте в обсуждении PR — отвечайте на комментарии, вносите необходимые исправления и улучшения на основе обратной связи.
#
# 3.1.2. Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues?
#
# - Используйте ключевые слова в сообщении коммита, такие как closes, fixes или resolves, чтобы GitHub автоматически закрыл связанный issue после слияния (например, fixes #123).
# - Добавьте ссылку на issue в заголовке коммита, если коммит напрямую связан с конкретной задачей.
# - Пишите осмысленные сообщения коммита, чётко описывая внесённые изменения и их цель.
# - Следите за содержанием коммита — включайте только файлы, соответствующие описанию коммита. Желательно придерживаться правила "один коммит — одна задача".
# - Делайте коммиты регулярно, чтобы упростить отслеживание изменений и сделать удобным процесс отладки.
# - Убедитесь, что все тесты проходят успешно перед коммитом, чтобы не нарушить работоспособность проекта.

# 3.2 Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)
#
# ![PR_cancellation_1.png](attachment:PR_cancellation_1.png)

# 3.3 Перед отправкой пул реквеста нужно ли создавать ишьюс?
#
# Создавать Issue перед отправкой Pull Request не является обязательным требованием, но это считается хорошей практикой, особенно в командных и крупных проектах. Это помогает отслеживать задачи, улучшает коммуникацию внутри команды и упрощает процесс ревью. Поэтому в таких случаях создание Issue рекомендуется.

# 3.4 В какой вкладке можно посмотреть список изменений который был в пул реквесте? (Рисунок 92)
#
# Files changed

# 3.5 В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94)
#
# Conversation

# СОЗДАНИЕ ЗАПРОСА НА СЛИЯНИЕ

# 4. Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
#
# Нет, открыть пул реквест без внесённых изменений в форк невозможно, так как GitHub не обнаружит различий между ветками и не сможет создать запрос на слияние.

# 4.1 Что нужно сделать чтобы открыть пул реквест? (Рисунок 90)
#
# Чтобы открыть pull request, нажмите кнопку "Compare & pull request" на странице вашего форка или после пуша изменений в репозиторий.

# 4.2 Что нужно сделать Если ваш Форк устарел?
#
# 4.2.1. Через консоль:
#
# - Добавьте оригинальный репозиторий как удалённый источник:
#     ```bash
#     git remote add upstream <ссылка на оригинальный репозиторий>
#     ```
#
# - Получите последние обновления из оригинала:
#     ```bash
#     git fetch upstream
#     ```
#
# - Переключитесь на основную ветку (обычно main или master):
#     ```bash
#     git checkout main
#     ```
#
# - Объедините изменения из оригинального репозитория в свою локальную ветку:
#     ```bash
#     git merge upstream/main
#     ```
#
# - Разрешите конфликты, если они возникнут.
#
# - Отправьте обновлённую ветку в свой форк на GitHub:
#     ```bash
#     git push origin main
#     ```
#
# 4.2.2.  Через GitHub:
#
# - Откройте страницу своего форка.
# - Перейдите во вкладку Pull requests и нажмите New pull request.
# - Выберите оригинальный репозиторий как источник изменений и свой форк в качестве цели.
# - Нажмите Create pull request.
# - Подтвердите слияние, кликнув Merge pull request.
# - Если возникнут конфликты, используйте Resolve conflicts для их устранения вручную и завершите процесс слияния.

# 4.3 Что нужно сделать если в пул реквесте имеются конфликты слияния (Рисунок 96)
#
# Есть два подхода для их решения:
#
# 4.3.1. Слияние целевой ветки в свою ветку.
# Это наиболее распространённый метод. Нужно просто слить целевую ветку (чаще всего master или main) в вашу рабочую ветку, разрешить конфликты и запушить изменения. Этот способ сохраняет полную историю коммитов и упрощает процесс.
#
# 4.3.2. Перебазирование (rebase) своей ветки относительно целевой.
# Этот вариант делает историю коммитов более чистой, но сложнее в реализации и может привести к ошибкам, если не выполнять его внимательно.
#
# В большинстве случаев разработчики выбирают первый способ — слияние — так как он проще и безопаснее для командной работы.

# ОТРЫВКИ КОДА

# 5 Что нужно сделать Для добавления отрывка кода в комментарии к ишьюсу? (Рисунок 104)
#
# A. Через ссылку на код:
#
# - Выделите нужные строки кода в репозитории.
# - Нажмите на три точки рядом с выделением и выберите "Copy permalink".
# - Вставьте эту ссылку в комментарий к Issue — это создаст прямую ссылку на конкретный фрагмент кода.
#
# Б. Вставка кода вручную:
# - Скопируйте нужный фрагмент кода.
# - В комментарии обрамите его тройными обратными кавычками (```) для форматирования.
# - Чтобы добавить подсветку синтаксиса, укажите название языка сразу после первых трёх кавычек. Например:
# ```bash
# def hello_world():
#     print("Hello, world!")
# ```
#
# Оба метода позволяют наглядно представить код в комментарии и упростить обсуждение.

# 5.1 На какую клавишу нажать клавишу чтобы выделенный текст был включён как цитата в ваш комментарий?(Рисунок 105)
#
# - Выделить текст и нажмите клавишу r — выбранный фрагмент автоматически станет цитатой в вашем комментарии.
# - Альтернативный способ — вручную добавить символ > перед строкой, чтобы оформить её как цитату.
#
# Оба метода помогут выделить важные части текста для обсуждения.

# 5.2 Как вставить картинку в ишьюс? (Рисунок 108)
#
# Внизу поля для комментария находится значок скрепки с текстом "Paste, drop or click to add files". Чтобы добавить картинку:
#
# - Нажать на скрепку и выберите изображение с вашего компьютера.
# - Либо перетащить файл прямо в окно комментария.
# - Также можно просто вставить скопированное изображение с помощью Ctrl + V.
#
# После загрузки картинка автоматически появится в описании Issue.

# ПОДДЕРЖАНИЕ GITHUB РЕПОЗИТОРИЯ В АКТУАЛЬНОМ СОСТОЯНИИ

# 6 Как понять что ваш форк устарел?
#
# А. Через интерфейс GitHub:
#
# - Открыть свой форк на GitHub.
# - Нажать "Compare" или "Compare & pull request".
# - Выбрать оригинальный репозиторий и нужную ветку для сравнения.
# - Если появится список изменений, которых нет в Вашем форке, это означает, что Ваш форк устарел.
#
# Б. Через терминал:
#
# - Выполнить команду: git fetch upstream — она подтянет последние изменения из оригинального репозитория.
# - Далее использовать git status, чтобы проверить, отстает ли ваш форк и есть ли несинхронизированные изменения.
#
# В. Уведомления GitHub:
# - GitHub иногда автоматически уведомляет, что Ваш форк отстает от оригинала, отображая это на главной странице вашего форка.
#
# Эти способы помогут Вам вовремя обновлять форк и оставаться в курсе последних изменений.

# 6.1 Как обновить форк?
#
# Способ 1. Без предварительной конфигурации:
# А. Перейти на ветку master в локальном репозитории:
# ```bash
# git checkout master
# ```
# Б. Подтяните изменения из оригинального репозитория:
# ```bash
# git pull "URL_оригинального_репозитория"
# ```
#
# В. Отправьте обновления в свой форк на GitHub:
# ```bash
# git push origin master
# ```
#
# Способ 2. С предварительной конфигурацией (удобен для частых обновлений):
# А. Добавьте оригинальный репозиторий как удалённый с другим именем (например, upstream):
# ```bash
# git remote add upstream "URL_оригинального_репозитория"
# ```
#
# Б. Настройте локальную ветку master для отслеживания изменений из оригинального репозитория:
# ```bash
# git branch --set-upstream-to=upstream/master master
# ```
# В. Укажите origin как репозиторий по умолчанию для отправки изменений:
# ```bash
# git config --local remote.pushDefault origin
# ```
#
# Теперь процесс обновления будет проще:
# ```bash
# git checkout master
# git pull         # Подтянуть изменения из оригинала
# git push         # Отправить их в свой форк
# ```
#
# Второй способ удобен для постоянного взаимодействия с оригинальным репозиторием, так как упрощает будущие обновления.

# ДОБАВЛЕНИЕ УЧАСТНИКОВ

# 7. Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием? (Рисунок 112)
#
# - Перейдите в раздел Settings Вашего репозитория.
# - В левой панели выберите Access.
# - Нажмите Collaborators, затем выберите Add people для добавления участников.
#
# После этого Вы сможете назначить коллег для совместной работы над репозиторием.

# УПОМИНАНИЯ И УВЕДОМЛЕНИЯ

# 8. Какой символ нужен для упоминания кого-либо? (Рисунок 118)
#
# @

# 8.1 Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
#
# https://github.com/notifications

# ОСОБЕННЫЕ ФАЙЛЫ

# 9. Что такое и зачем нужен файл README
#
# Файл README предназначен для описания проекта и предоставления важной информации как пользователям, так и разработчикам. Он включает следующие разделы:
#
# - Описание назначения проекта
# - Инструкции по настройке и установке
# - Примеры использования
# - Информация о лицензии
# - Правила участия в проекте
#
# Этот файл помогает новым пользователям и участникам быстрее разобраться с проектом и понять, как с ним работать.

# 9.1 Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122)
#
# Файл CONTRIBUTING содержит конкретные рекомендации и требования, которые нужно учитывать при создании новых запросов на слияние. Он помогает потенциальным участникам проекта ознакомиться с правилами и ожиданиями, прежде чем предложить изменения через pull request.

# УПРАВЛЕНИЕ ПРОЕКТОМ

# 10. Как измененить основную ветку (Рисунок 123)
#
# Перейдите в Settings Вашего репозитория, затем во вкладке General найдите раздел Default branch. Здесь Вы можете выбрать ветку, которая будет основной для создания запросов на слияние.

# 10.1. Как передать проект? какая кнопка? (рисунок 124)
#
# Перейдите в Settings Вашего репозитория, прокрутите страницу вниз до раздела Danger zone. В разделе Transfer ownership нажмите кнопку Transfer. Эта опция полезна, если Вы хотите передать проект другому пользователю или организации, например, когда проект развивается, и требуется передача управления.

# 10.2. Что такое файл .gitignore?
#
# Файл .gitignore — это специальный файл, который используется в Git для указания, какие файлы и папки не должны отслеживаться системой контроля версий.
