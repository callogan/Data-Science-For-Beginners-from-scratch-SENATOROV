"""Ответы на вопросы по CPython."""

# 1. Что такое CPython и чем он отличается от Python?
#
# ![Пайтон_1.png](attachment:Пайтон_1.png)
#
# Python является языком программирования, который определяет синтаксис, стандарты и правила его работы. Он представляет собой абстрактную спецификацию, не привязанную к конкретной реализации (ысокоуровневый язык).
#
# CPython представляет собой одну из реализаций Python, написанная на языке C. По сути это интерпретатор, который выполняет код Python, взаимодействуя с операционной системой и аппаратным обеспечением на низком уровне.

# 3. Сколько существует реализаций Python, и какая из них самая популярная?
#
# * CPython – основная и самая популярная реализация Python, написанная на C. Используется большинством разработчиков.
# * PyPy – альтернативный интерпретатор с JIT-компиляцией, ускоряющий выполнение программ.
# * Jython – версия Python, работающая на JVM, что позволяет взаимодействовать с Java-кодом.
# * IronPython – реализация Python для .NET, интегрирующаяся с экосистемой Microsoft.
# * MicroPython – облегчённая версия Python для микроконтроллеров и встраиваемых систем.
# * Stackless Python – модификация CPython, которая улучшает поддержку многозадачности за счёт отказа от стека вызовов на уровне C, что позволяет использовать микрозадачи и снижает накладные расходы на переключение контекста.
# * CircuitPython – форк MicroPython, разработанный компанией Adafruit. Оптимизирован для простоты использования с микроконтроллерами и образовательными проектами.
# Самой популярной остаётся CPython, так как он является официальной реализацией и поддерживает стандартную библиотеку Python.

# 4. На каком языке написан CPython?
#
# На языке С.

# ПОИСК И УСТАНОВКА CPYTHON

# 5. (опционально) Кто создал CPython?
#
# Гвидо ван Россум.

# 6. Почему Python считается быстрым, несмотря на то, что это интерпретируемый язык?
#
# Python считается относительно быстрым, несмотря на то, что является интерпретируемым языком, благодаря следующим особенностям:
#
# * Использование байт-кода, который выполняется быстрее, чем исходный код на Python.
# * Возможность расширения с помощью модулей на C, что ускоряет выполнение ресурсоёмких операций.
# * Поддержка JIT-компиляции (например, в PyPy), которая позволяет значительно повысить производительность за счёт динамической компиляции.
# * Асинхронное программирование, позволяющее эффективно работать с задачами ввода-вывода, не блокируя выполнение программы.

# 7. Напишите путь к Интерпретатору CPython на вашем компьютере
#
# C:\Users\Ruslan\AppData\Local\Programs\Python\Python312\include\cpython

# СТРУКТУРА CPYTHON

# 8. Что содержится в папке include в CPython?
#
# Папка include в CPython содержит заголовочные (интерфейсные) файлы, которые используются для создания C-расширений, взаимодействия с внутренними объектами Python и работы с API интерпретатора. Эти файлы также необходимы для интеграции с системными библиотеками и внешними модулями.
#
#
#

# 9. Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
#
# https://github.com/python/cpython

# 10. (опционально) Как работает интерпретатор CPython при выполнении кода?
#
# CPython одновременно выполняет роль интерпретатора и компилятора: сначала он преобразует код Python в байт-код, а затем исполняет его на виртуальной машине Python (PVM).

# ЗАПУСК ФАЙЛА С ПОМОЩЬЮ CPYTHON

# 11. Какая команда используется для запуска файла с помощью CPython?
#
# python \path\to\script.py

# 12. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
#
# Интерпретатор Python выполняет только файлы с корректным Python-кодом. Если текстовый файл имеет расширение .py и содержит валидный код на Python, его можно запустить как скрипт. Однако, если в файле отсутствует Python-код, при попытке его выполнения возникнет ошибка синтаксиса.

# 13. Как указать путь к интерпретатору и файлу для выполнения кода?
#
# C:\Python\python.exe C:\Users\user\script.py

# ВВЕДЕНИЕ В PYPY

# 14. Чем PyPy отличается от CPython?
#
# PyPy отличается от CPython тем, что использует JIT-компиляцию, благодаря чему в некоторых случаях может работать значительно быстрее.
#
# CPython — это стандартная реализация Python, обеспечивающая максимальную совместимость с библиотеками и фреймворками.
#
# PyPy обычно совместим с Python 2.x и 3.x, но могут возникать различия в работе с C-расширениями. Он эффективнее использует память при хранении объектов, что позволяет обрабатывать большие объемы данных. Поддержка C-расширений осуществляется через CFFI, но не все модули, написанные для CPython, работают без доработок.
#
# PyPy соблюдает спецификацию Python, однако возможны небольшие расхождения в поведении. Разработчики PyPy регулярно обновляют интерпретатор для поддержки актуальных версий Python.

# 15. Почему PyPy не может использоваться для всех проектов на Python?
#
# Преимущественно из-за ограниченной совместимости с определёнными фреймворками и сторонними библиотеками.

# 16. Где можно скачать PyPy?
#
# На официальном сайте PyPy: https://www.pypy.org

# УСТАНОВКА И ЗАПУСК PYPY

# 17. Как установить PyPy после скачивания?
#
# Распакуйте архив в удобную папку, например, C:\pypy. В распакованной директории найдите исполняемый файл pypy.exe. Чтобы запускать PyPy из любой папки в командной строке, добавьте путь к этому файлу в переменную окружения PATH.

# 18. Как запустить файл с помощью PyPy?
#
# python \path\to\script.py

# 19. Почему PyPy выполняет код быстрее, чем CPython?
#
# PyPy использует JIT-компиляцию, которая во время выполнения программы преобразует Python-код в машинный код. Это позволяет PyPy динамически оптимизировать выполнение отдельных частей кода, что делает его быстрее по сравнению с CPython, который просто интерпретирует байт-код без подобных оптимизаций.

# ПРАКТИЧЕСКИЕ ЗАДАНИЯ

# Задание 1: Поиск и установка CPython
#
# CPython установлен.

# Задание 2: Исследование структуры CPython
#
# Всего в папке include/cpython есть 7 файлов, название которых начинается на букву С.
# Эти файлы заголовков (.h) относятся к внутренней реализации CPython. Они определяют структуры данных, функции и API, которые используются внутри интерпретатора Python. Данные файлы обеспечивают фундаментальные механизмы CPython, включая работу с замыканиями, стеком вызовов, компиляцией, выполнением кода и поддержкой сложных типов данных. Они относятся к внутреннему API CPython, которое используется при разработке самого интерпретатора или написании расширений на C.

# Задание 3: Запуск файла с помощью CPython
#
# Выполнено.

# Задание 4: Установка и использование PyPy
#
# Выполнено.

# Задание 5: (сравнение производительности CPython и PyPy)
#
# Результат запуска:
#
# Result: 49999995000000
# Execution time: 0.013967752456665039 seconds
#
